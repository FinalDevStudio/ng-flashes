!function(n){"use strict";function t(n){function t(t){function e(e){var i=t.list[e];i&&(n.cancel(i.timeout),t.list.splice(e,1))}function i(){e(t.list.indexOf(this))}function s(s,l){t.list.length>1&&e(0),l.timeout=n(i.bind(l),m.dismissDelay),t.list.push(l)}t.$on(c,s),t.dismiss=e,t.list=[]}function e(n,t){return t.templateUrl?t.templateUrl:m.templateUrl}var i={templateUrl:e,restrict:"A",scope:{},link:t};return i}function e(n){l.isString(n.templateUrl)&&(m.templateUrl=n.templateUrl),l.isNumber(n.dismissDelay)&&(m.dismissDelay=parseInt(n.dismissDelay))}function i(n){function t(t,e,i){n.$broadcast(c,{type:t||o,message:i,title:e})}var e={success:t.bind(null,r),warning:t.bind(null,a),danger:t.bind(null,u),info:t.bind(null,o),show:t};return e}function s(){var n={configure:e,$get:["$rootScope",i]};return n}var l=n.angular,r="success",a="warning",u="danger",o="info",c="ngFlashes.show",m={templateUrl:null,dismissDelay:5e3};l.module("ngFlashes",[]).provider("ngFlashes",s).directive("ngFlashesContainer",["$timeout",t])}(window);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLWZsYXNoZXMuanMiXSwibmFtZXMiOlsid2luZG93IiwibmdGbGFzaGVzQ29udGFpbmVyRGlyZWN0aXZlRm4iLCIkdGltZW91dCIsIm5nRmxhc2hlc0RpcmVjdGl2ZUxpbmtGbiIsIiRzY29wZSIsImRpc21pc3MiLCJpZHgiLCJmbGFzaCIsImxpc3QiLCJjYW5jZWwiLCJ0aW1lb3V0Iiwic3BsaWNlIiwib25EaXNtaXNzIiwiaW5kZXhPZiIsInRoaXMiLCJvbkZsYXNoU2hvdyIsIiRldmVudCIsImxlbmd0aCIsImJpbmQiLCJjb25maWciLCJkaXNtaXNzRGVsYXkiLCJwdXNoIiwiJG9uIiwiRVZFTlRfU0hPVyIsIm5nZmxhc2hlc1RlbXBsYXRlVXJsRm4iLCIkZWxlbWVudCIsIiRhdHRycyIsInRlbXBsYXRlVXJsIiwibmdGbGFzaERlZiIsInJlc3RyaWN0Iiwic2NvcGUiLCJsaW5rIiwiY29uZmlndXJlIiwiY2ZnIiwibmciLCJpc1N0cmluZyIsImlzTnVtYmVyIiwicGFyc2VJbnQiLCJuZ0ZsYXNoZXNTZXJ2aWNlRm4iLCIkcm9vdFNjb3BlIiwic2hvdyIsInR5cGUiLCJ0aXRsZSIsIm1lc3NhZ2UiLCIkYnJvYWRjYXN0IiwiVFlQRV9JTkZPIiwibmdGbGFzaGVzU2VydmljZURlZiIsInN1Y2Nlc3MiLCJUWVBFX1NVQ0NFU1MiLCJ3YXJuaW5nIiwiVFlQRV9XQVJOSU5HIiwiZGFuZ2VyIiwiVFlQRV9EQU5HRVIiLCJpbmZvIiwibmdGbGFzaGVzUHJvdmlkZXJGbiIsIm5nRmxhc2hlc1Byb3ZpZGVyRGVmIiwiJGdldCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJwcm92aWRlciIsImRpcmVjdGl2ZSJdLCJtYXBwaW5ncyI6IkNBQUMsU0FBVUEsR0FDVCxZQW1CQSxTQUFTQyxHQUE4QkMsR0FJckMsUUFBU0MsR0FBeUJDLEdBTWhDLFFBQVNDLEdBQVFDLEdBQ2YsR0FBSUMsR0FBUUgsRUFBT0ksS0FBS0YsRUFFcEJDLEtBQ0ZMLEVBQVNPLE9BQU9GLEVBQU1HLFNBQ3RCTixFQUFPSSxLQUFLRyxPQUFPTCxFQUFLLElBTzVCLFFBQVNNLEtBQ1BQLEVBQVFELEVBQU9JLEtBQUtLLFFBQVFDLE9BTTlCLFFBQVNDLEdBQVlDLEVBQVFULEdBQ3ZCSCxFQUFPSSxLQUFLUyxPQUFTLEdBQ3ZCWixFQUFRLEdBR1ZFLEVBQU1HLFFBQVVSLEVBQVNVLEVBQVVNLEtBQUtYLEdBQVFZLEVBQU9DLGNBRXZEaEIsRUFBT0ksS0FBS2EsS0FBS2QsR0FHbkJILEVBQU9rQixJQUFJQyxFQUFZUixHQUV2QlgsRUFBT0MsUUFBVUEsRUFFakJELEVBQU9JLFFBTVQsUUFBU2dCLEdBQXVCQyxFQUFVQyxHQUN4QyxNQUFJQSxHQUFPQyxZQUNGRCxFQUFPQyxZQUdUUixFQUFPUSxZQUloQixHQUFJQyxJQUNGRCxZQUFhSCxFQUViSyxTQUFVLElBRVZDLFNBRUFDLEtBQU01QixFQUdSLE9BQU95QixHQVFULFFBQVNJLEdBQVVDLEdBRWJDLEVBQUdDLFNBQVNGLEVBQUlOLGVBQ2xCUixFQUFPUSxZQUFjTSxFQUFJTixhQUl2Qk8sRUFBR0UsU0FBU0gsRUFBSWIsZ0JBQ2xCRCxFQUFPQyxhQUFlaUIsU0FBU0osRUFBSWIsZUFPdkMsUUFBU2tCLEdBQW1CQyxHQVMxQixRQUFTQyxHQUFLQyxFQUFNQyxFQUFPQyxHQUN6QkosRUFBV0ssV0FBV3JCLEdBQ3BCa0IsS0FBTUEsR0FBUUksRUFDZEYsUUFBU0EsRUFDVEQsTUFBT0EsSUFJWCxHQUFJSSxJQUNGQyxRQUFTUCxFQUFLdEIsS0FBSyxLQUFNOEIsR0FDekJDLFFBQVNULEVBQUt0QixLQUFLLEtBQU1nQyxHQUN6QkMsT0FBUVgsRUFBS3RCLEtBQUssS0FBTWtDLEdBQ3hCQyxLQUFNYixFQUFLdEIsS0FBSyxLQUFNMkIsR0FDdEJMLEtBQU1BLEVBR1IsT0FBT00sR0FNVCxRQUFTUSxLQUNQLEdBQUlDLElBQ0Z2QixVQUFXQSxFQUVYd0IsTUFDRSxhQUVBbEIsR0FJSixPQUFPaUIsR0F0SlQsR0FBSXJCLEdBQUtsQyxFQUFPeUQsUUFFWlQsRUFBZSxVQUNmRSxFQUFlLFVBQ2ZFLEVBQWMsU0FDZFAsRUFBWSxPQUVadEIsRUFBYSxpQkFFYkosR0FDRlEsWUFBYSxLQUNiUCxhQUFjLElBaUpoQmMsR0FBR3dCLE9BQU8sZ0JBR1RDLFNBQVMsWUFBYUwsR0FHdEJNLFVBQVUsc0JBQ1QsV0FFQTNELEtBR0ZEIiwiZmlsZSI6Im5nLWZsYXNoZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKHdpbmRvdykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIG5nID0gd2luZG93LmFuZ3VsYXI7XG5cbiAgdmFyIFRZUEVfU1VDQ0VTUyA9ICdzdWNjZXNzJztcbiAgdmFyIFRZUEVfV0FSTklORyA9ICd3YXJuaW5nJztcbiAgdmFyIFRZUEVfREFOR0VSID0gJ2Rhbmdlcic7XG4gIHZhciBUWVBFX0lORk8gPSAnaW5mbyc7XG5cbiAgdmFyIEVWRU5UX1NIT1cgPSAnbmdGbGFzaGVzLnNob3cnO1xuXG4gIHZhciBjb25maWcgPSB7XG4gICAgdGVtcGxhdGVVcmw6IG51bGwsXG4gICAgZGlzbWlzc0RlbGF5OiA1MDAwXG4gIH07XG5cbiAgLyoqXG4gICAqIG5nRmxhc2hlcyBkaXJlY3RpdmUgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBuZ0ZsYXNoZXNDb250YWluZXJEaXJlY3RpdmVGbigkdGltZW91dCkge1xuICAgIC8qKlxuICAgICAqIG5nRmxhc2hlcyBkaXJlY3RpdmUgbGluayBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZ0ZsYXNoZXNEaXJlY3RpdmVMaW5rRm4oJHNjb3BlKSB7XG4gICAgICAvKipcbiAgICAgICAqIERpc21pc3NlcyBhbnkgYWN0aXZlIGZsYXNoLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpZHggVGhlIGZsYXNoIGluZGV4IHRvIGRpc21pc3MuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGRpc21pc3MoaWR4KSB7XG4gICAgICAgIHZhciBmbGFzaCA9ICRzY29wZS5saXN0W2lkeF07XG5cbiAgICAgICAgaWYgKGZsYXNoKSB7XG4gICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKGZsYXNoLnRpbWVvdXQpO1xuICAgICAgICAgICRzY29wZS5saXN0LnNwbGljZShpZHgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRmxhc2ggZGlzbWlzcyB0aW1lb3V0IGNhbGxiYWNrLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBvbkRpc21pc3MoKSB7XG4gICAgICAgIGRpc21pc3MoJHNjb3BlLmxpc3QuaW5kZXhPZih0aGlzKSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRmxhc2ggc2hvdyBldmVudCBsaXN0ZW5lciBjYWxsYmFjay5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gb25GbGFzaFNob3coJGV2ZW50LCBmbGFzaCkge1xuICAgICAgICBpZiAoJHNjb3BlLmxpc3QubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGRpc21pc3MoMCk7XG4gICAgICAgIH1cblxuICAgICAgICBmbGFzaC50aW1lb3V0ID0gJHRpbWVvdXQob25EaXNtaXNzLmJpbmQoZmxhc2gpLCBjb25maWcuZGlzbWlzc0RlbGF5KTtcblxuICAgICAgICAkc2NvcGUubGlzdC5wdXNoKGZsYXNoKTtcbiAgICAgIH1cblxuICAgICAgJHNjb3BlLiRvbihFVkVOVF9TSE9XLCBvbkZsYXNoU2hvdyk7XG5cbiAgICAgICRzY29wZS5kaXNtaXNzID0gZGlzbWlzcztcblxuICAgICAgJHNjb3BlLmxpc3QgPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBuZ0ZsYXNoZXMgdGVtcGxhdGUgVVJMIGRpcmVjdGl2ZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZ2ZsYXNoZXNUZW1wbGF0ZVVybEZuKCRlbGVtZW50LCAkYXR0cnMpIHtcbiAgICAgIGlmICgkYXR0cnMudGVtcGxhdGVVcmwpIHtcbiAgICAgICAgcmV0dXJuICRhdHRycy50ZW1wbGF0ZVVybDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbmZpZy50ZW1wbGF0ZVVybDtcbiAgICB9XG5cbiAgICAvKiBuZ0ZsYXNoZXMgZGlyZWN0aXZlIGRlZmluaXRpb24gKi9cbiAgICB2YXIgbmdGbGFzaERlZiA9IHtcbiAgICAgIHRlbXBsYXRlVXJsOiBuZ2ZsYXNoZXNUZW1wbGF0ZVVybEZuLFxuXG4gICAgICByZXN0cmljdDogJ0EnLFxuXG4gICAgICBzY29wZToge30sXG5cbiAgICAgIGxpbms6IG5nRmxhc2hlc0RpcmVjdGl2ZUxpbmtGblxuICAgIH07XG5cbiAgICByZXR1cm4gbmdGbGFzaERlZjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QuXG4gICAqL1xuICBmdW5jdGlvbiBjb25maWd1cmUoY2ZnKSB7XG4gICAgLyogU2V0IGRlZmF1bHQgdGVtcGxhdGUgVVJMICovXG4gICAgaWYgKG5nLmlzU3RyaW5nKGNmZy50ZW1wbGF0ZVVybCkpIHtcbiAgICAgIGNvbmZpZy50ZW1wbGF0ZVVybCA9IGNmZy50ZW1wbGF0ZVVybDtcbiAgICB9XG5cbiAgICAvKiBTZXQgZGVmYXVsdCBhdXRvIGRpc21pc3MgZGVsYXkgKi9cbiAgICBpZiAobmcuaXNOdW1iZXIoY2ZnLmRpc21pc3NEZWxheSkpIHtcbiAgICAgIGNvbmZpZy5kaXNtaXNzRGVsYXkgPSBwYXJzZUludChjZmcuZGlzbWlzc0RlbGF5KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogbmdGbGFzaGVzIHNlcnZpY2UgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBuZ0ZsYXNoZXNTZXJ2aWNlRm4oJHJvb3RTY29wZSkge1xuICAgIC8qKlxuICAgICAqIFNob3cgYSBuZXcgZmxhc2ggbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBmbGFzaC4gRWl0aGVyICdpbmZvJywgJ3N1Y2NlcycsXG4gICAgICogJ3dhcm5pbmcnIG9yICdkYW5nZXInLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0aXRsZSBUaGUgdGl0bGUgb2YgdGhlIGZsYXNoIG1lc3NhZ2UuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgYm9keSBvZiB0aGUgZmxhc2ggbWVzc2FnZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG93KHR5cGUsIHRpdGxlLCBtZXNzYWdlKSB7XG4gICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoRVZFTlRfU0hPVywge1xuICAgICAgICB0eXBlOiB0eXBlIHx8IFRZUEVfSU5GTyxcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgdGl0bGU6IHRpdGxlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgbmdGbGFzaGVzU2VydmljZURlZiA9IHtcbiAgICAgIHN1Y2Nlc3M6IHNob3cuYmluZChudWxsLCBUWVBFX1NVQ0NFU1MpLFxuICAgICAgd2FybmluZzogc2hvdy5iaW5kKG51bGwsIFRZUEVfV0FSTklORyksXG4gICAgICBkYW5nZXI6IHNob3cuYmluZChudWxsLCBUWVBFX0RBTkdFUiksXG4gICAgICBpbmZvOiBzaG93LmJpbmQobnVsbCwgVFlQRV9JTkZPKSxcbiAgICAgIHNob3c6IHNob3dcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5nRmxhc2hlc1NlcnZpY2VEZWY7XG4gIH1cblxuICAvKipcbiAgICogbmdGbGFzaGVzIHByb3ZpZGVyIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gbmdGbGFzaGVzUHJvdmlkZXJGbigpIHtcbiAgICB2YXIgbmdGbGFzaGVzUHJvdmlkZXJEZWYgPSB7XG4gICAgICBjb25maWd1cmU6IGNvbmZpZ3VyZSxcblxuICAgICAgJGdldDogW1xuICAgICAgICAnJHJvb3RTY29wZScsXG5cbiAgICAgICAgbmdGbGFzaGVzU2VydmljZUZuXG4gICAgICBdXG4gICAgfTtcblxuICAgIHJldHVybiBuZ0ZsYXNoZXNQcm92aWRlckRlZjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgQW5ndWxhckpTIG1vZHVsZS5cbiAgICovXG4gIG5nLm1vZHVsZSgnbmdGbGFzaGVzJywgW10pXG5cbiAgLyogRGVmaW5lIHNlcnZpY2UgcHJvdmlkZXIgKi9cbiAgLnByb3ZpZGVyKCduZ0ZsYXNoZXMnLCBuZ0ZsYXNoZXNQcm92aWRlckZuKVxuXG4gIC8qIERlZmluZSBkaXJlY3RpdmUgKi9cbiAgLmRpcmVjdGl2ZSgnbmdGbGFzaGVzQ29udGFpbmVyJywgW1xuICAgICckdGltZW91dCcsXG5cbiAgICBuZ0ZsYXNoZXNDb250YWluZXJEaXJlY3RpdmVGblxuICBdKTtcblxufSh3aW5kb3cpKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
