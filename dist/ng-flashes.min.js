!function(n){"use strict";function e(n){function e(e){function t(t){var i=e.list[t];i&&(n.cancel(i.timeout),e.list.splice(t,1))}function i(){t(e.list.indexOf(this))}function s(s,l){e.list.length>1&&t(0),l.timeout=n(i.bind(l),m.dismissDelay),e.list.push(l)}e.$on(c,s),e.dismiss=t,e.list=[]}function t(n,e){return e.templateUrl?e.templateUrl:m.templateUrl}var i={templateUrl:t,restrict:"A",scope:{},link:e};return i}function t(n){l.isString(n.templateUrl)&&(m.templateUrl=n.templateUrl),l.isNumber(n.dismissDelay)&&(m.dismissDelay=parseInt(n.dismissDelay))}function i(n){function e(e,t,i){n.$broadcast(c,{type:e||o,message:i,title:t})}var t={success:e.bind(null,r),warning:e.bind(null,a),danger:e.bind(null,u),info:e.bind(null,o),show:e};return t}function s(){var n={configure:t,$get:["$rootScope",i]};return n}var l=n.angular,r="success",a="warning",u="danger",o="info",c="ngFlashes.show",m={templateUrl:null,dismissDelay:5e3};l.module("ngFlashes",[]).provider("ngFlashes",s).directive("ngFlashesContainer",["$timeout","$session",e])}(window);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLWZsYXNoZXMuanMiXSwibmFtZXMiOlsid2luZG93IiwibmdGbGFzaGVzQ29udGFpbmVyRGlyZWN0aXZlRm4iLCIkdGltZW91dCIsIm5nRmxhc2hlc0RpcmVjdGl2ZUxpbmtGbiIsIiRzY29wZSIsImRpc21pc3MiLCJpZHgiLCJmbGFzaCIsImxpc3QiLCJjYW5jZWwiLCJ0aW1lb3V0Iiwic3BsaWNlIiwib25EaXNtaXNzIiwiaW5kZXhPZiIsInRoaXMiLCJvbkZsYXNoU2hvdyIsIiRldmVudCIsImxlbmd0aCIsImJpbmQiLCJjb25maWciLCJkaXNtaXNzRGVsYXkiLCJwdXNoIiwiJG9uIiwiRVZFTlRfU0hPVyIsIm5nZmxhc2hlc1RlbXBsYXRlVXJsRm4iLCIkZWxlbWVudCIsIiRhdHRycyIsInRlbXBsYXRlVXJsIiwibmdGbGFzaERlZiIsInJlc3RyaWN0Iiwic2NvcGUiLCJsaW5rIiwiY29uZmlndXJlIiwiY2ZnIiwibmciLCJpc1N0cmluZyIsImlzTnVtYmVyIiwicGFyc2VJbnQiLCJuZ0ZsYXNoZXNTZXJ2aWNlRm4iLCIkcm9vdFNjb3BlIiwic2hvdyIsInR5cGUiLCJ0aXRsZSIsIm1lc3NhZ2UiLCIkYnJvYWRjYXN0IiwiVFlQRV9JTkZPIiwibmdGbGFzaGVzU2VydmljZURlZiIsInN1Y2Nlc3MiLCJUWVBFX1NVQ0NFU1MiLCJ3YXJuaW5nIiwiVFlQRV9XQVJOSU5HIiwiZGFuZ2VyIiwiVFlQRV9EQU5HRVIiLCJpbmZvIiwibmdGbGFzaGVzUHJvdmlkZXJGbiIsIm5nRmxhc2hlc1Byb3ZpZGVyRGVmIiwiJGdldCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJwcm92aWRlciIsImRpcmVjdGl2ZSJdLCJtYXBwaW5ncyI6IkNBQUMsU0FBVUEsR0FDVCxZQW1CQSxTQUFTQyxHQUE4QkMsR0FJckMsUUFBU0MsR0FBeUJDLEdBTWhDLFFBQVNDLEdBQVFDLEdBQ2YsR0FBSUMsR0FBUUgsRUFBT0ksS0FBS0YsRUFFcEJDLEtBQ0ZMLEVBQVNPLE9BQU9GLEVBQU1HLFNBQ3RCTixFQUFPSSxLQUFLRyxPQUFPTCxFQUFLLElBTzVCLFFBQVNNLEtBQ1BQLEVBQVFELEVBQU9JLEtBQUtLLFFBQVFDLE9BTTlCLFFBQVNDLEdBQVlDLEVBQVFULEdBQ3ZCSCxFQUFPSSxLQUFLUyxPQUFTLEdBQ3ZCWixFQUFRLEdBR1ZFLEVBQU1HLFFBQVVSLEVBQVNVLEVBQVVNLEtBQUtYLEdBQVFZLEVBQU9DLGNBRXZEaEIsRUFBT0ksS0FBS2EsS0FBS2QsR0FHbkJILEVBQU9rQixJQUFJQyxFQUFZUixHQUV2QlgsRUFBT0MsUUFBVUEsRUFFakJELEVBQU9JLFFBTVQsUUFBU2dCLEdBQXVCQyxFQUFVQyxHQUN4QyxNQUFJQSxHQUFPQyxZQUNGRCxFQUFPQyxZQUdUUixFQUFPUSxZQUloQixHQUFJQyxJQUNGRCxZQUFhSCxFQUViSyxTQUFVLElBRVZDLFNBRUFDLEtBQU01QixFQUdSLE9BQU95QixHQVFULFFBQVNJLEdBQVVDLEdBRWJDLEVBQUdDLFNBQVNGLEVBQUlOLGVBQ2xCUixFQUFPUSxZQUFjTSxFQUFJTixhQUl2Qk8sRUFBR0UsU0FBU0gsRUFBSWIsZ0JBQ2xCRCxFQUFPQyxhQUFlaUIsU0FBU0osRUFBSWIsZUFPdkMsUUFBU2tCLEdBQW1CQyxHQVMxQixRQUFTQyxHQUFLQyxFQUFNQyxFQUFPQyxHQUN6QkosRUFBV0ssV0FBV3JCLEdBQ3BCa0IsS0FBTUEsR0FBUUksRUFDZEYsUUFBU0EsRUFDVEQsTUFBT0EsSUFJWCxHQUFJSSxJQUNGQyxRQUFTUCxFQUFLdEIsS0FBSyxLQUFNOEIsR0FDekJDLFFBQVNULEVBQUt0QixLQUFLLEtBQU1nQyxHQUN6QkMsT0FBUVgsRUFBS3RCLEtBQUssS0FBTWtDLEdBQ3hCQyxLQUFNYixFQUFLdEIsS0FBSyxLQUFNMkIsR0FDdEJMLEtBQU1BLEVBR1IsT0FBT00sR0FNVCxRQUFTUSxLQUNQLEdBQUlDLElBQ0Z2QixVQUFXQSxFQUVYd0IsTUFDRSxhQUVBbEIsR0FJSixPQUFPaUIsR0F0SlQsR0FBSXJCLEdBQUtsQyxFQUFPeUQsUUFFWlQsRUFBZSxVQUNmRSxFQUFlLFVBQ2ZFLEVBQWMsU0FDZFAsRUFBWSxPQUVadEIsRUFBYSxpQkFFYkosR0FDRlEsWUFBYSxLQUNiUCxhQUFjLElBaUpoQmMsR0FBR3dCLE9BQU8sZ0JBR1RDLFNBQVMsWUFBYUwsR0FHdEJNLFVBQVUsc0JBQ1QsV0FBWSxXQUVaM0QsS0FHRkQiLCJmaWxlIjoibmctZmxhc2hlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAod2luZG93KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgbmcgPSB3aW5kb3cuYW5ndWxhcjtcblxuICB2YXIgVFlQRV9TVUNDRVNTID0gJ3N1Y2Nlc3MnO1xuICB2YXIgVFlQRV9XQVJOSU5HID0gJ3dhcm5pbmcnO1xuICB2YXIgVFlQRV9EQU5HRVIgPSAnZGFuZ2VyJztcbiAgdmFyIFRZUEVfSU5GTyA9ICdpbmZvJztcblxuICB2YXIgRVZFTlRfU0hPVyA9ICduZ0ZsYXNoZXMuc2hvdyc7XG5cbiAgdmFyIGNvbmZpZyA9IHtcbiAgICB0ZW1wbGF0ZVVybDogbnVsbCxcbiAgICBkaXNtaXNzRGVsYXk6IDUwMDBcbiAgfTtcblxuICAvKipcbiAgICogbmdGbGFzaGVzIGRpcmVjdGl2ZSBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIG5nRmxhc2hlc0NvbnRhaW5lckRpcmVjdGl2ZUZuKCR0aW1lb3V0KSB7XG4gICAgLyoqXG4gICAgICogbmdGbGFzaGVzIGRpcmVjdGl2ZSBsaW5rIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5nRmxhc2hlc0RpcmVjdGl2ZUxpbmtGbigkc2NvcGUpIHtcbiAgICAgIC8qKlxuICAgICAgICogRGlzbWlzc2VzIGFueSBhY3RpdmUgZmxhc2guXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkeCBUaGUgZmxhc2ggaW5kZXggdG8gZGlzbWlzcy5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZGlzbWlzcyhpZHgpIHtcbiAgICAgICAgdmFyIGZsYXNoID0gJHNjb3BlLmxpc3RbaWR4XTtcblxuICAgICAgICBpZiAoZmxhc2gpIHtcbiAgICAgICAgICAkdGltZW91dC5jYW5jZWwoZmxhc2gudGltZW91dCk7XG4gICAgICAgICAgJHNjb3BlLmxpc3Quc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGbGFzaCBkaXNtaXNzIHRpbWVvdXQgY2FsbGJhY2suXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIG9uRGlzbWlzcygpIHtcbiAgICAgICAgZGlzbWlzcygkc2NvcGUubGlzdC5pbmRleE9mKHRoaXMpKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGbGFzaCBzaG93IGV2ZW50IGxpc3RlbmVyIGNhbGxiYWNrLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBvbkZsYXNoU2hvdygkZXZlbnQsIGZsYXNoKSB7XG4gICAgICAgIGlmICgkc2NvcGUubGlzdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgZGlzbWlzcygwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZsYXNoLnRpbWVvdXQgPSAkdGltZW91dChvbkRpc21pc3MuYmluZChmbGFzaCksIGNvbmZpZy5kaXNtaXNzRGVsYXkpO1xuXG4gICAgICAgICRzY29wZS5saXN0LnB1c2goZmxhc2gpO1xuICAgICAgfVxuXG4gICAgICAkc2NvcGUuJG9uKEVWRU5UX1NIT1csIG9uRmxhc2hTaG93KTtcblxuICAgICAgJHNjb3BlLmRpc21pc3MgPSBkaXNtaXNzO1xuXG4gICAgICAkc2NvcGUubGlzdCA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG5nRmxhc2hlcyB0ZW1wbGF0ZSBVUkwgZGlyZWN0aXZlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5nZmxhc2hlc1RlbXBsYXRlVXJsRm4oJGVsZW1lbnQsICRhdHRycykge1xuICAgICAgaWYgKCRhdHRycy50ZW1wbGF0ZVVybCkge1xuICAgICAgICByZXR1cm4gJGF0dHJzLnRlbXBsYXRlVXJsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29uZmlnLnRlbXBsYXRlVXJsO1xuICAgIH1cblxuICAgIC8qIG5nRmxhc2hlcyBkaXJlY3RpdmUgZGVmaW5pdGlvbiAqL1xuICAgIHZhciBuZ0ZsYXNoRGVmID0ge1xuICAgICAgdGVtcGxhdGVVcmw6IG5nZmxhc2hlc1RlbXBsYXRlVXJsRm4sXG5cbiAgICAgIHJlc3RyaWN0OiAnQScsXG5cbiAgICAgIHNjb3BlOiB7fSxcblxuICAgICAgbGluazogbmdGbGFzaGVzRGlyZWN0aXZlTGlua0ZuXG4gICAgfTtcblxuICAgIHJldHVybiBuZ0ZsYXNoRGVmO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZShjZmcpIHtcbiAgICAvKiBTZXQgZGVmYXVsdCB0ZW1wbGF0ZSBVUkwgKi9cbiAgICBpZiAobmcuaXNTdHJpbmcoY2ZnLnRlbXBsYXRlVXJsKSkge1xuICAgICAgY29uZmlnLnRlbXBsYXRlVXJsID0gY2ZnLnRlbXBsYXRlVXJsO1xuICAgIH1cblxuICAgIC8qIFNldCBkZWZhdWx0IGF1dG8gZGlzbWlzcyBkZWxheSAqL1xuICAgIGlmIChuZy5pc051bWJlcihjZmcuZGlzbWlzc0RlbGF5KSkge1xuICAgICAgY29uZmlnLmRpc21pc3NEZWxheSA9IHBhcnNlSW50KGNmZy5kaXNtaXNzRGVsYXkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBuZ0ZsYXNoZXMgc2VydmljZSBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIG5nRmxhc2hlc1NlcnZpY2VGbigkcm9vdFNjb3BlKSB7XG4gICAgLyoqXG4gICAgICogU2hvdyBhIG5ldyBmbGFzaCBtZXNzYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgdGhlIGZsYXNoLiBFaXRoZXIgJ2luZm8nLCAnc3VjY2VzJyxcbiAgICAgKiAnd2FybmluZycgb3IgJ2RhbmdlcicuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRpdGxlIFRoZSB0aXRsZSBvZiB0aGUgZmxhc2ggbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSBib2R5IG9mIHRoZSBmbGFzaCBtZXNzYWdlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3codHlwZSwgdGl0bGUsIG1lc3NhZ2UpIHtcbiAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdChFVkVOVF9TSE9XLCB7XG4gICAgICAgIHR5cGU6IHR5cGUgfHwgVFlQRV9JTkZPLFxuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICB0aXRsZTogdGl0bGVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBuZ0ZsYXNoZXNTZXJ2aWNlRGVmID0ge1xuICAgICAgc3VjY2Vzczogc2hvdy5iaW5kKG51bGwsIFRZUEVfU1VDQ0VTUyksXG4gICAgICB3YXJuaW5nOiBzaG93LmJpbmQobnVsbCwgVFlQRV9XQVJOSU5HKSxcbiAgICAgIGRhbmdlcjogc2hvdy5iaW5kKG51bGwsIFRZUEVfREFOR0VSKSxcbiAgICAgIGluZm86IHNob3cuYmluZChudWxsLCBUWVBFX0lORk8pLFxuICAgICAgc2hvdzogc2hvd1xuICAgIH07XG5cbiAgICByZXR1cm4gbmdGbGFzaGVzU2VydmljZURlZjtcbiAgfVxuXG4gIC8qKlxuICAgKiBuZ0ZsYXNoZXMgcHJvdmlkZXIgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBuZ0ZsYXNoZXNQcm92aWRlckZuKCkge1xuICAgIHZhciBuZ0ZsYXNoZXNQcm92aWRlckRlZiA9IHtcbiAgICAgIGNvbmZpZ3VyZTogY29uZmlndXJlLFxuXG4gICAgICAkZ2V0OiBbXG4gICAgICAgICckcm9vdFNjb3BlJyxcblxuICAgICAgICBuZ0ZsYXNoZXNTZXJ2aWNlRm5cbiAgICAgIF1cbiAgICB9O1xuXG4gICAgcmV0dXJuIG5nRmxhc2hlc1Byb3ZpZGVyRGVmO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZSBBbmd1bGFySlMgbW9kdWxlLlxuICAgKi9cbiAgbmcubW9kdWxlKCduZ0ZsYXNoZXMnLCBbXSlcblxuICAvKiBEZWZpbmUgc2VydmljZSBwcm92aWRlciAqL1xuICAucHJvdmlkZXIoJ25nRmxhc2hlcycsIG5nRmxhc2hlc1Byb3ZpZGVyRm4pXG5cbiAgLyogRGVmaW5lIGRpcmVjdGl2ZSAqL1xuICAuZGlyZWN0aXZlKCduZ0ZsYXNoZXNDb250YWluZXInLCBbXG4gICAgJyR0aW1lb3V0JywgJyRzZXNzaW9uJyxcblxuICAgIG5nRmxhc2hlc0NvbnRhaW5lckRpcmVjdGl2ZUZuXG4gIF0pO1xuXG59KHdpbmRvdykpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
